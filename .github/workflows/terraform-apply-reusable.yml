name: Terraform apply reusable workflow

on:
  workflow_call:
    inputs:
      runs-on:
        description: The type of machine to run the job on. The machine can be either a GitHub-hosted runner, or a self-hosted runner.
        required: false
        type: string
        default: self-hosted
      project-key:
        description: The key of the project used in github oidc AWS role
        required: true
        type: string
      environment:
        description: The terraform environment
        required: true
        type: string
      continue-on-error:
        description: If true - continue on error
        required: false
        type: boolean
        default: false
      AWS_REGION:
        description: AWS region
        required: false
        type: string
        default: eu-central-1
    secrets:
      PAT:
        required: true

permissions:
  id-token: write
  contents: read
  packages: read

jobs:
  terraform-apply:
    continue-on-error: ${{ inputs.continue-on-error }}
    environment: ${{ inputs.environment }}
    runs-on: ${{ inputs.runs-on }}
    concurrency: ci-${{ github.ref }}
    steps:
      - name: Configure workflow to fetch private repos
        run: |
          git config --global url."https://foo:${{ secrets.PAT }}@github.com".insteadOf "ssh://git@github.com"
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/github-actions-${{ inputs.project-key }}-${{ inputs.environment }}
          role-session-name: ${{ inputs.project-key }}-${{ inputs.environment }}
          aws-region: ${{ inputs.AWS_REGION }}
      - name: "terraform-init::${{ inputs.environment }}"
        id: init
        run: |
          #!/bin/bash

          set +e

          command_to_execute="terraform init  -upgrade -backend-config=backend-configs/${{ inputs.environment }}-backend.tfvars"
          timeout_seconds=300 # 5 minutes
          max_retries=3

          retry_count=0

          while [ $retry_count -lt $max_retries ]; do
            # Execute the command with a timeout, store exit status
            timeout $timeout_seconds $command_to_execute

            # Check the exit status
            exit_status=$?
                        
            if [ $exit_status == 0 ]; then
              echo "Command executed successfully"
              break
            else
              echo "Command failed with exit status $exit_status"
              echo "Retrying..."
              retry_count=$((retry_count + 1))
            fi
          done

          if [ $retry_count == $max_retries ]; then
            echo "Maximum retries reached. Exiting..."
            exit 1
          fi

          ./resources/tf_ws_select.sh ${{ inputs.environment }}

      - name: "terraform-validate::${{ inputs.environment }}"
        id: validate
        run: |
          #!/bin/bash
          terraform validate
      - name: "terraform-apply::${{ inputs.environment }}"
        id: apply
        run: |
          terraform apply -auto-approve -var-file=${{ inputs.environment }}.tfvars
